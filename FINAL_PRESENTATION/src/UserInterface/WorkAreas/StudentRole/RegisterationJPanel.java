
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.StudentRole;

import Business.Business;
import Business.Profiles.StudentProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.util.ArrayList;
import Business.Courses.Course;
import javax.swing.JOptionPane;


/**
 *
 * @author Paul
 */
public class RegisterationJPanel extends javax.swing.JPanel {

    private Business business;
    private StudentProfile student;
    private JPanel CardSequencePanel;
    
    
    /**
     * Creates new form RegisterationJPanel
     */
    public RegisterationJPanel() {
        initComponents();
    }
    
    /**
     * Creates new form RegisterationJPanel with business logic
     * @param business
     * @param student
     * @param cardPanel
     */
    public RegisterationJPanel(Business business, StudentProfile student, JPanel cardPanel) {
        this.business = business;
        this.student = student;
        this.CardSequencePanel = cardPanel;
        initComponents();
        populateStudentInfo();
        populateRegistrationTable();
        loadAvailableCourses();  // Add this line
        setupEventHandlers();    // Add this line
    }

    /**
     * Populate student information fields
     */
    private void populateStudentInfo() {
        if (student != null) {
            jLabel3.setText(student.getName()); // Student Name
            jLabel5.setText(student.getStudentId()); // Student ID
            jLabel7.setText(student.getMajor()); // Major
        }
    }
    
    /**
     * Populate the registration table with student's course data
     */
    private void populateRegistrationTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        if (student != null && student.getCourses() != null) {
            // Use real Course objects instead of course codes
            for (Course course : student.getCourses()) {
                String status = course.getGrade().equals("In Progress") ? "Registered" : "Completed";
                String registrationDate = "2025-01-15"; // Sample date

                Object[] row = {
                    course.getCourseCode(),
                    course.getCourseName(),
                    String.valueOf(course.getCredits()),
                    status,
                    registrationDate
                };
                model.addRow(row);
            }
        }
    }
    
    /**
     * Helper method to get course name from course code
     * In a real system, this would query a course catalog
     */
    private String getCourseNameFromCode(String courseCode) {
        // Simple mapping - in real system, query from database
        switch (courseCode) {
            case "CS101": return "Introduction to Computer Science";
            case "CS102": return "Data Structures";
            case "MATH201": return "Calculus I";
            case "ENG101": return "English Composition";
            case "PHYS101": return "Physics I";
            default: return "Course Name";
        }
    }
    
    /**
     * Helper method to get course credits from course code
     */
    private String getCourseCredits(String courseCode) {
        // Simple mapping - in real system, query from database
        if (courseCode.startsWith("MATH") || courseCode.startsWith("PHYS")) {
            return "4";
        }
        return "3";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        courseRegisterationComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 255, 204));

        jButton1.setText("<<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lao MN", 1, 18)); // NOI18N
        jLabel1.setText("Registeration Status");

        jLabel5.setText("jLabel5");

        jLabel2.setText("Student Name:");

        jLabel7.setText("jLabel7");

        jLabel6.setText("Major:");

        jLabel4.setText("Student ID:");

        jLabel3.setText("jLabel3");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Code", "Course Name", "Credits", "Registeration Status", "Date Registered"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel8.setText("My Registeration Status");

        jLabel9.setText("Courses:");

        btnRegister.setText("Register");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel9)
                        .addGap(57, 57, 57)
                        .addComponent(courseRegisterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(btnRegister)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(43, 43, 43)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseRegisterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnRegister))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (CardSequencePanel != null) {
            try {
                // Try to show existing StudentWorkArea
                ((CardLayout) CardSequencePanel.getLayout()).show(CardSequencePanel, "StudentWorkArea");
            } catch (Exception e) {
                // If that fails, create a new one
                StudentWorkAreaJPanel studentWorkArea = new StudentWorkAreaJPanel(business, student, CardSequencePanel);
                CardSequencePanel.add("StudentWorkArea", studentWorkArea);
                ((CardLayout) CardSequencePanel.getLayout()).show(CardSequencePanel, "StudentWorkArea");
            }
            // Refresh the panel
            CardSequencePanel.revalidate();
            CardSequencePanel.repaint();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void loadAvailableCourses() {
        courseRegisterationComboBox.removeAllItems();
        courseRegisterationComboBox.addItem("Select Course...");

        // Sample available courses for Spring 2025
        String[] availableCourses = {
            "CS201 - Advanced Programming (4 credits)",
            "CS250 - Computer Systems (4 credits)", 
            "MATH301 - Calculus II (3 credits)",
            "ENG102 - Advanced Writing (3 credits)",
            "HIST201 - World History II (3 credits)",
            "CHEM101 - General Chemistry (4 credits)",
            "PSYC101 - Introduction to Psychology (3 credits)",
            "ECON101 - Principles of Economics (3 credits)"
        };

        for (String course : availableCourses) {
            // Check if student is already registered for this course
            String courseCode = course.split(" - ")[0];
            boolean alreadyRegistered = false;

            for (Course registeredCourse : student.getCourses()) {
                if (registeredCourse.getCourseCode().equals(courseCode)) {
                    alreadyRegistered = true;
                    break;
                }
            }

            // Only add if not already registered
            if (!alreadyRegistered) {
                courseRegisterationComboBox.addItem(course);
            }
        }
    }

    /**
     * Handle course registration when Register button is clicked
     */
    private void registerForSelectedCourse() {
        int selectedIndex = courseRegisterationComboBox.getSelectedIndex();
        if (selectedIndex <= 0) {
            JOptionPane.showMessageDialog(this, 
                "Please select a course to register for", 
                "No Course Selected", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String selectedCourse = courseRegisterationComboBox.getSelectedItem().toString();
        String[] parts = selectedCourse.split(" - ");
        String courseCode = parts[0];
        String courseInfo = parts[1];

        // Extract course name and credits
        String courseName = courseInfo.substring(0, courseInfo.lastIndexOf("(")).trim();
        String creditsText = courseInfo.substring(courseInfo.lastIndexOf("(") + 1, courseInfo.lastIndexOf(")"));
        int credits = Integer.parseInt(creditsText.split(" ")[0]);

        // Confirm registration
        int result = JOptionPane.showConfirmDialog(this,
            "Register for " + courseCode + " - " + courseName + "?",
            "Confirm Registration",
            JOptionPane.YES_NO_OPTION);

        if (result == JOptionPane.YES_OPTION) {
            try {
                // Create new course and add to student
                Course newCourse = new Course(courseCode, courseName, "Spring 2025", credits);
                student.addCourse(newCourse);

                // Refresh the displays
                populateRegistrationTable();
                loadAvailableCourses();

                JOptionPane.showMessageDialog(this, 
                    "Successfully registered for " + courseCode + "!", 
                    "Registration Complete", 
                    JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, 
                    "Error registering for course: " + e.getMessage(), 
                    "Registration Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void setupEventHandlers() {
        btnRegister.addActionListener(e -> registerForSelectedCourse());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox<String> courseRegisterationComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
