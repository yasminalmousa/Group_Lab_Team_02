/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManagePersonnelWorkResp;

import Business.Business;
import Business.Profiles.FacultyProfile;
import Business.Profiles.FacultyDirectory;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;

/**
 *
 * @author yasminalmousa
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    private Business business;
    private javax.swing.JPanel CardSequencePanel;
    private DefaultTableModel tableModel;

    /**
     * Creates new form ManageFacultyJPanel
     */
    public ManageFacultyJPanel(Business b, JPanel clp) {
        this.business = b;
        this.CardSequencePanel = clp;
        initComponents();
        initializeTable();
        setupTableSelection();
        refreshTable();
    }

    private void initializeTable() {
        // Set up the table model
        tableModel = (DefaultTableModel) facultyTable.getModel();
        facultyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void setupTableSelection() {
        // Add mouse listener to populate fields when row is selected
        facultyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 1) {
                    populateFieldsFromSelectedRow();
                }
            }
        });
    }

    private void populateFieldsFromSelectedRow() {
        int selectedRow = facultyTable.getSelectedRow();
        if (selectedRow != -1) {
            fieldFacultyID.setText(tableModel.getValueAt(selectedRow, 0).toString());
            fieldName.setText(tableModel.getValueAt(selectedRow, 1).toString());
            fieldEmail.setText(tableModel.getValueAt(selectedRow, 2).toString());
            fieldDepartment.setText(tableModel.getValueAt(selectedRow, 3).toString());
        }
    }

    private void refreshTable() {
        // Clear existing rows
        tableModel.setRowCount(0);
        
        // Get faculty list from business
        FacultyDirectory facultyDirectory = business.getFacultyDirectory();
        ArrayList<FacultyProfile> facultyList = facultyDirectory.getFacultyList();
        
        // Populate table with faculty data
        for (FacultyProfile faculty : facultyList) {
            Object[] row = {
                faculty.getFacultyId(),
                faculty.getName(),
                faculty.getEmail(),
                faculty.getDepartment()
            };
            tableModel.addRow(row);
        }
    }

    private void clearFields() {
        fieldFacultyID.setText("");
        fieldName.setText("");
        fieldEmail.setText("");
        fieldDepartment.setText("");
        facultyTable.clearSelection();
    }

    private boolean validateFields() {
        if (fieldFacultyID.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Faculty ID", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (fieldName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Name", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (fieldEmail.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Email", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (fieldDepartment.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Department", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fieldFacultyID = new javax.swing.JTextField();
        fieldEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        fieldDepartment = new javax.swing.JTextField();
        btnAddFaculty = new javax.swing.JButton();
        btnUpdateFaculty = new javax.swing.JButton();
        btnDeleteFaculty = new javax.swing.JButton();
        btnClearField = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        facultyTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Lao MN", 1, 24)); // NOI18N
        jLabel1.setText("Manage Faculty");

        jLabel2.setText("Faculty Information");

        jLabel3.setText("Faculty ID:");

        jLabel4.setText("Email:");

        jLabel5.setText("Name:");

        jLabel6.setText("Department:");

        btnAddFaculty.setText("Add Faculty");
        btnAddFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFacultyActionPerformed(evt);
            }
        });

        btnUpdateFaculty.setText("Update Faculty");
        btnUpdateFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFacultyActionPerformed(evt);
            }
        });

        btnDeleteFaculty.setText("Delete Faculty");
        btnDeleteFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteFacultyActionPerformed(evt);
            }
        });

        btnClearField.setText("Clear Fields");
        btnClearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Faculty List");

        facultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Faculty ID", "Name", "Email", "Department"
            }
        ));
        jScrollPane1.setViewportView(facultyTable);

        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldFacultyID, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                    .addComponent(fieldEmail)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(btnAddFaculty)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateFaculty))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(btnBack)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDeleteFaculty)
                                .addGap(18, 18, 18)
                                .addComponent(btnClearField))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(fieldDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnBack)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldFacultyID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(fieldDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddFaculty)
                    .addComponent(btnUpdateFaculty)
                    .addComponent(btnDeleteFaculty)
                    .addComponent(btnClearField))
                .addGap(54, 54, 54)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteFacultyActionPerformed
        int selectedRow = facultyTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String facultyId = tableModel.getValueAt(selectedRow, 0).toString();
            String name = tableModel.getValueAt(selectedRow, 1).toString();
            
            // Confirm deletion
            int result = JOptionPane.showConfirmDialog(this, 
                "Are you sure you want to delete faculty member: " + name + "?", 
                "Confirm Deletion", 
                JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                FacultyDirectory facultyDirectory = business.getFacultyDirectory();
                FacultyProfile faculty = facultyDirectory.findFacultyById(facultyId);
                
                if (faculty != null) {
                    facultyDirectory.removeFaculty(faculty);
                    JOptionPane.showMessageDialog(this, "Faculty deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    clearFields();
                    refreshTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Faculty not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting faculty: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteFacultyActionPerformed

    private void btnAddFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFacultyActionPerformed
        if (!validateFields()) {
            return;
        }
        
        try {
            String facultyId = fieldFacultyID.getText().trim();
            String name = fieldName.getText().trim();
            String email = fieldEmail.getText().trim();
            String department = fieldDepartment.getText().trim();
            
            // Check if faculty ID already exists
            FacultyDirectory facultyDirectory = business.getFacultyDirectory();
            if (facultyDirectory.findFacultyById(facultyId) != null) {
                JOptionPane.showMessageDialog(this, "Faculty ID already exists!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Create new faculty profile
            FacultyProfile newFaculty = new FacultyProfile(facultyId, name, email, department);
            facultyDirectory.addFaculty(newFaculty);
            
            JOptionPane.showMessageDialog(this, "Faculty added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearFields();
            refreshTable();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error adding faculty: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddFacultyActionPerformed

    private void btnUpdateFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFacultyActionPerformed
        if (!validateFields()) {
            return;
        }
        
        int selectedRow = facultyTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String facultyId = fieldFacultyID.getText().trim();
            String name = fieldName.getText().trim();
            String email = fieldEmail.getText().trim();
            String department = fieldDepartment.getText().trim();
            
            // Find the faculty profile
            FacultyDirectory facultyDirectory = business.getFacultyDirectory();
            FacultyProfile faculty = facultyDirectory.findFacultyById(facultyId);
            
            if (faculty == null) {
                JOptionPane.showMessageDialog(this, "Faculty not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Update faculty information
            faculty.setName(name);
            faculty.setEmail(email);
            faculty.setDepartment(department);
            
            JOptionPane.showMessageDialog(this, "Faculty updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            clearFields();
            refreshTable();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating faculty: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateFacultyActionPerformed

    private void btnClearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFieldActionPerformed
        clearFields();
    }//GEN-LAST:event_btnClearFieldActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    // Remove current panel and go back to admin main panel
    CardSequencePanel.remove(this);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed
                                                                                                                   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFaculty;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClearField;
    private javax.swing.JButton btnDeleteFaculty;
    private javax.swing.JButton btnUpdateFaculty;
    private javax.swing.JTable facultyTable;
    private javax.swing.JTextField fieldDepartment;
    private javax.swing.JTextField fieldEmail;
    private javax.swing.JTextField fieldFacultyID;
    private javax.swing.JTextField fieldName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
